{"paragraphs":[{"text":"%spark2.pyspark\n\nfrom pyspark.mllib.tree import DecisionTree, DecisionTreeModel\nfrom pyspark.mllib.util import MLUtils\n\n# Load and parse the data file into an RDD of LabeledPoint.\ndata = MLUtils.loadLibSVMFile(sc, 'data/mlib/sample_libsvm_data.txt')\n# Split the data into training and test sets (30% held out for testing)\n(trainingData, testData) = data.randomSplit([0.09, 0.008])\n\n# Train a DecisionTree model.\n#  Empty categoricalFeaturesInfo indicates all features are continuous.\nmodel = DecisionTree.trainClassifier(trainingData, numClasses=2, categoricalFeaturesInfo={},\n                                     impurity='gini', maxDepth=5, maxBins=3)\n\"\"\"\n# Evaluate model on test instances and compute test error\npredictions = model.predict(testData.map(lambda x: x.features))\nlabelsAndPredictions = testData.map(lambda lp: lp.label).zip(predictions)\ntestErr = labelsAndPredictions.filter(\n    lambda lp: lp[0] != lp[1]).count() / float(testData.count())\nprint('Test Error = ' + str(testErr))\nprint('Learned classification tree model:')\n\"\"\"\nprint(model.toDebugString())","user":"spark","dateUpdated":"2019-05-03T13:03:28+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556797793048_196503865","id":"20190502-134953_346731089","dateCreated":"2019-05-02T13:49:53+0200","dateStarted":"2019-05-03T13:03:29+0200","dateFinished":"2019-05-03T13:03:30+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13337","errorMessage":""},{"text":"%spark2.pyspark\n\nimport json\n\ndef parse(lines):\n\t\tblock = []\n\t\twhile lines :\n\t\t\tif lines[0].startswith('If'):\n\t\t\t\tbl = ' '.join(lines.pop(0).split()[1:]).replace('(', '').replace(')', '')\n\t\t\t\tprint (bl)\n\t\t\t\tblock.append({'name':bl, 'children':parse(lines)})\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif lines[0].startswith('Else'):\n\t\t\t\t\tbe = ' '.join(lines.pop(0).split()[1:]).replace('(', '').replace(')', '')\n\t\t\t\t\tblock.append({'name':be, 'children':parse(lines)})\n\t\t\telif not lines[0].startswith(('If','Else')):\n\t\t\t\tblock2 = lines.pop(0)\n\t\t\t\tblock.append({'name':block2})\n\t\t\telse:\n\t\t\t\tbreak\n\t\treturn block\n\t\t\ndef tree_json(tree):\n\t\tdata = []\n\t\tfor line in tree.splitlines() : \n\t\t\tif line.strip():\n\t\t\t\tline = line.strip()\n\t\t\t\tdata.append(line)\n\t\t\telse : break\n\t\t\tif not line : break\n\t\tres = []\n\t\tres.append({'name':'Root', 'children':parse(data[1:])})\n\t\tprint ('Conversion Success !')\n\t\treturn res","user":"spark","dateUpdated":"2019-05-03T13:03:32+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1556797824824_1622569659","id":"20190502-135024_348592135","dateCreated":"2019-05-02T13:50:24+0200","dateStarted":"2019-05-03T13:03:32+0200","dateFinished":"2019-05-03T13:03:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:13338"},{"text":"%spark2.pyspark\n\nresult = tree_json(model.toDebugString())\nprint(result)\nprint (\"\"\"%angular\n    <script>\n        var data = \"\"\", result[0], \"\"\"\n    </script>\n\"\"\")","user":"spark","dateUpdated":"2019-05-03T13:03:33+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556797841063_631511501","id":"20190502-135041_2046174215","dateCreated":"2019-05-02T13:50:41+0200","dateStarted":"2019-05-03T13:03:34+0200","dateFinished":"2019-05-03T13:03:34+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:13339","errorMessage":""},{"text":"%angular\n\n    \n    <style>\n        .node {\n            cursor: pointer;\n        }\n            .node circle {\n                /*fill: #fff;\n                stroke: steelblue;*/\n                stroke-width: 3px;\n            }\n\n            .node text {\n                font: 12px sans-serif;\n            }\n\n        .link {\n            fill: none;\n            stroke: #ccc;\n            stroke-width: 2px;\n        }\n\n        #tree-horizontal {\n            margin-bottom: 10px;\n            overflow: scroll;\n            height: 800px;\n        }\n        \n        #tree-horizontal svg {\n            display: block;\n            width: 500%;\n            height: 500%;\n        }\n\t\n    </style>\n    \n    <center><h2>Horizontal Tree</h2></center>\n    \n    <div id=\"tree-horizontal\">\n\n    </div>\n\n\n<!-- load the d3.js library -->\t\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n\t\n<script>\n\n  $(document).ready(function () {\n            \n            //build tree\n            function BuildHorizontalTree(treeData, treeContainerDom) {\n            \n                var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n\n\t\t\t\tvar screenHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            \n                var margin = { top: 20, right: 120, bottom: 20, left: 120 };\n                var width = screenWidth - margin.right - margin.left;\n                var height = screenHeight - margin.top - margin.bottom;\n                \n\n                var i = 0, duration = 750;\n                var tree = d3.layout.tree()\n                    .size([height, width]);\n                var diagonal = d3.svg.diagonal()\n                    .projection(function (d) { return [d.y, d.x]; });\n                var svg = d3.select(treeContainerDom)\n                    .append(\"svg\")\n                    .attr(\"width\", width + margin.right + margin.left)\n                    //.attr(\"height\", height + margin.top + margin.bottom)\n                    .attr(\"height\", 500)\n                  .append(\"g\")\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n                root = treeData;\n\n                update(root);\n                function update(source) {\n                    // Compute the new tree layout.\n                    var nodes = tree.nodes(root).reverse(),\n                        links = tree.links(nodes);\n                    // Normalize for fixed-depth.\n                    nodes.forEach(function (d) { d.y = d.depth * 150; });\n                    // Declare the nodes…\n                    var node = svg.selectAll(\"g.node\")\n                        .data(nodes, function (d) { return d.id || (d.id = ++i); });\n                    // Enter the nodes.\n                    var nodeEnter = node.enter().append(\"g\")\n                        .attr(\"class\", \"node\")\n                        .attr(\"transform\", function (d) {\n                            return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n                        }).on(\"click\", nodeclick);\n                    nodeEnter.append(\"circle\")\n                     .attr(\"r\", 10)\n                        .attr(\"stroke\", function (d) { return d.children || d._children ? \"steelblue\" : \"#00c13f\"; })\n                        .style(\"fill\", function (d) { return d.children || d._children ? \"lightsteelblue\" : \"#fff\"; });\n                    //.attr(\"r\", 10)\n                    //.style(\"fill\", \"#fff\");\n                    nodeEnter.append(\"text\")\n                        .attr(\"y\", function (d) {\n                            return d.children || d._children ? -18 : 18;\n                        })\n                        .attr(\"dy\", \".35em\")\n                        .attr(\"text-anchor\", \"middle\")\n                        .text(function (d) { return d.name; })\n                        .style(\"fill-opacity\", 1e-6);\n                    // Transition nodes to their new position.\n                    //horizontal tree\n                    var nodeUpdate = node.transition()\n                        .duration(duration)\n                        .attr(\"transform\", function (d) { return \"translate(\" + d.y + \",\" + d.x + \")\"; });\n                    nodeUpdate.select(\"circle\")\n                        .attr(\"r\", 10)\n                        .style(\"fill\", function (d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n                    nodeUpdate.select(\"text\")\n                        .style(\"fill-opacity\", 1);\n\n\n                    // Transition exiting nodes to the parent's new position.\n                    var nodeExit = node.exit().transition()\n                        .duration(duration)\n                        .attr(\"transform\", function (d) { return \"translate(\" + source.y + \",\" + source.x + \")\"; })\n                        .remove();\n                    nodeExit.select(\"circle\")\n                        .attr(\"r\", 1e-6);\n                    nodeExit.select(\"text\")\n                        .style(\"fill-opacity\", 1e-6);\n                    // Update the links…\n                    // Declare the links…\n                    var link = svg.selectAll(\"path.link\")\n                        .data(links, function (d) { return d.target.id; });\n                    // Enter the links.\n                    link.enter().insert(\"path\", \"g\")\n                        .attr(\"class\", \"link\")\n\n                        .attr(\"d\", function (d) {\n                            var o = { x: source.x0, y: source.y0 };\n                            return diagonal({ source: o, target: o });\n                        });\n                    // Transition links to their new position.\n                    link.transition()\n                        .duration(duration)\n                    .attr(\"d\", diagonal);\n\n\n                    // Transition exiting nodes to the parent's new position.\n                    link.exit().transition()\n                        .duration(duration)\n                        .attr(\"d\", function (d) {\n                            var o = { x: source.x, y: source.y };\n                            return diagonal({ source: o, target: o });\n                        })\n                        .remove();\n\n                    // Stash the old positions for transition.\n                    nodes.forEach(function (d) {\n                        d.x0 = d.x;\n                        d.y0 = d.y;\n                    });\n                }\n\n                // Toggle children on click.\n                function nodeclick(d) {\n                    if (d.children) {\n                        d._children = d.children;\n                        d.children = null;\n                    } else {\n                        d.children = d._children;\n                        d._children = null;\n                    }\n                    update(d);\n                }\n            }\n            \n            BuildHorizontalTree(data, \"#tree-horizontal\");\n        });\n\n</script>\n\n","user":"spark","dateUpdated":"2019-05-03T13:03:47+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":474.417,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/undefined","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<style>\n        .node {\n            cursor: pointer;\n        }\n            .node circle {\n                /*fill: #fff;\n                stroke: steelblue;*/\n                stroke-width: 3px;\n            }\n\n            .node text {\n                font: 12px sans-serif;\n            }\n\n        .link {\n            fill: none;\n            stroke: #ccc;\n            stroke-width: 2px;\n        }\n\n        #tree-horizontal {\n            margin-bottom: 10px;\n            overflow: scroll;\n            height: 800px;\n        }\n        \n        #tree-horizontal svg {\n            display: block;\n            width: 500%;\n            height: 500%;\n        }\n\t\n    </style>\n    \n    <center><h2>Horizontal Tree</h2></center>\n    \n    <div id=\"tree-horizontal\">\n\n    </div>\n\n\n<!-- load the d3.js library -->\t\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n\t\n<script>\n\n  $(document).ready(function () {\n            \n            //build tree\n            function BuildHorizontalTree(treeData, treeContainerDom) {\n            \n                var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n\n\t\t\t\tvar screenHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            \n                var margin = { top: 20, right: 120, bottom: 20, left: 120 };\n                var width = screenWidth - margin.right - margin.left;\n                var height = screenHeight - margin.top - margin.bottom;\n                \n\n                var i = 0, duration = 750;\n                var tree = d3.layout.tree()\n                    .size([height, width]);\n                var diagonal = d3.svg.diagonal()\n                    .projection(function (d) { return [d.y, d.x]; });\n                var svg = d3.select(treeContainerDom)\n                    .append(\"svg\")\n                    .attr(\"width\", width + margin.right + margin.left)\n                    //.attr(\"height\", height + margin.top + margin.bottom)\n                    .attr(\"height\", 500)\n                  .append(\"g\")\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n                root = treeData;\n\n                update(root);\n                function update(source) {\n                    // Compute the new tree layout.\n                    var nodes = tree.nodes(root).reverse(),\n                        links = tree.links(nodes);\n                    // Normalize for fixed-depth.\n                    nodes.forEach(function (d) { d.y = d.depth * 150; });\n                    // Declare the nodes…\n                    var node = svg.selectAll(\"g.node\")\n                        .data(nodes, function (d) { return d.id || (d.id = ++i); });\n                    // Enter the nodes.\n                    var nodeEnter = node.enter().append(\"g\")\n                        .attr(\"class\", \"node\")\n                        .attr(\"transform\", function (d) {\n                            return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n                        }).on(\"click\", nodeclick);\n                    nodeEnter.append(\"circle\")\n                     .attr(\"r\", 10)\n                        .attr(\"stroke\", function (d) { return d.children || d._children ? \"steelblue\" : \"#00c13f\"; })\n                        .style(\"fill\", function (d) { return d.children || d._children ? \"lightsteelblue\" : \"#fff\"; });\n                    //.attr(\"r\", 10)\n                    //.style(\"fill\", \"#fff\");\n                    nodeEnter.append(\"text\")\n                        .attr(\"y\", function (d) {\n                            return d.children || d._children ? -18 : 18;\n                        })\n                        .attr(\"dy\", \".35em\")\n                        .attr(\"text-anchor\", \"middle\")\n                        .text(function (d) { return d.name; })\n                        .style(\"fill-opacity\", 1e-6);\n                    // Transition nodes to their new position.\n                    //horizontal tree\n                    var nodeUpdate = node.transition()\n                        .duration(duration)\n                        .attr(\"transform\", function (d) { return \"translate(\" + d.y + \",\" + d.x + \")\"; });\n                    nodeUpdate.select(\"circle\")\n                        .attr(\"r\", 10)\n                        .style(\"fill\", function (d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n                    nodeUpdate.select(\"text\")\n                        .style(\"fill-opacity\", 1);\n\n\n                    // Transition exiting nodes to the parent's new position.\n                    var nodeExit = node.exit().transition()\n                        .duration(duration)\n                        .attr(\"transform\", function (d) { return \"translate(\" + source.y + \",\" + source.x + \")\"; })\n                        .remove();\n                    nodeExit.select(\"circle\")\n                        .attr(\"r\", 1e-6);\n                    nodeExit.select(\"text\")\n                        .style(\"fill-opacity\", 1e-6);\n                    // Update the links…\n                    // Declare the links…\n                    var link = svg.selectAll(\"path.link\")\n                        .data(links, function (d) { return d.target.id; });\n                    // Enter the links.\n                    link.enter().insert(\"path\", \"g\")\n                        .attr(\"class\", \"link\")\n\n                        .attr(\"d\", function (d) {\n                            var o = { x: source.x0, y: source.y0 };\n                            return diagonal({ source: o, target: o });\n                        });\n                    // Transition links to their new position.\n                    link.transition()\n                        .duration(duration)\n                    .attr(\"d\", diagonal);\n\n\n                    // Transition exiting nodes to the parent's new position.\n                    link.exit().transition()\n                        .duration(duration)\n                        .attr(\"d\", function (d) {\n                            var o = { x: source.x, y: source.y };\n                            return diagonal({ source: o, target: o });\n                        })\n                        .remove();\n\n                    // Stash the old positions for transition.\n                    nodes.forEach(function (d) {\n                        d.x0 = d.x;\n                        d.y0 = d.y;\n                    });\n                }\n\n                // Toggle children on click.\n                function nodeclick(d) {\n                    if (d.children) {\n                        d._children = d.children;\n                        d.children = null;\n                    } else {\n                        d.children = d._children;\n                        d._children = null;\n                    }\n                    update(d);\n                }\n            }\n            \n            BuildHorizontalTree(data, \"#tree-horizontal\");\n        });\n\n</script>"}]},"apps":[],"jobName":"paragraph_1556797652314_-2081776978","id":"20190502-134732_105358723","dateCreated":"2019-05-02T13:47:32+0200","dateStarted":"2019-05-03T13:03:35+0200","dateFinished":"2019-05-03T13:03:35+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:13340"},{"text":"%angular\n\n    \n    <style>\n        .node {\n            cursor: pointer;\n        }\n            .node circle {\n                /*fill: #fff;\n                stroke: steelblue;*/\n                stroke-width: 3px;\n            }\n\n            .node text {\n                font: 12px sans-serif;\n            }\n\n        .link {\n            fill: none;\n            stroke: #ccc;\n            stroke-width: 2px;\n        }\n\n        #tree-vertical {\n            margin-bottom: 10px;\n            overflow: scroll;\n            height: 800px;\n        }\n        \n        #tree-vertical svg {\n            display: block;\n            width: 500%;\n            height: 500%;\n        }\n\t\n    </style>\n    \n    <center><h2>Vertical Tree</h2></center>\n    \n    <div id=\"tree-vertical\">\n\n    </div>\n\n\n<!-- load the d3.js library -->\t\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n\t\n<script>\n\n  $(document).ready(function () {\n            \n            //build tree\n            function BuildVerticalTree(treeData, treeContainerDom) {\n            \n                var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n\n\t\t\t\tvar screenHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            \n                var margin = { top: 40, right: 120, bottom: 20, left: 120 };\n                var width = screenWidth - margin.right - margin.left;\n                var height = screenHeight - margin.top - margin.bottom;\n                \n\n                var i = 0, duration = 750;\n                var tree = d3.layout.tree()\n                    .size([height, width]);\n                var diagonal = d3.svg.diagonal()\n                    .projection(function (d) { return [d.x, d.y]; });\n                var svg = d3.select(treeContainerDom)\n                    .append(\"svg\")\n                    .attr(\"width\", width + margin.right + margin.left)\n                    //.attr(\"height\", height + margin.top + margin.bottom)\n                    .attr(\"height\", 500)\n                  .append(\"g\")\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n                root = treeData;\n\n                update(root);\n                function update(source) {\n                    // Compute the new tree layout.\n                    var nodes = tree.nodes(root).reverse(),\n                        links = tree.links(nodes);\n                    // Normalize for fixed-depth.\n                    nodes.forEach(function (d) { d.y = d.depth * 150; });\n                    // Declare the nodes…\n                    var node = svg.selectAll(\"g.node\")\n                        .data(nodes, function (d) { return d.id || (d.id = ++i); });\n                    // Enter the nodes.\n                    var nodeEnter = node.enter().append(\"g\")\n                        .attr(\"class\", \"node\")\n                        .attr(\"transform\", function (d) {\n                            return \"translate(\" + source.x0 + \",\" + source.y0 + \")\";\n                        }).on(\"click\", nodeclick);\n                    nodeEnter.append(\"circle\")\n                     .attr(\"r\", 10)\n                        .attr(\"stroke\", function (d) { return d.children || d._children ? \"steelblue\" : \"#00c13f\"; })\n                        .style(\"fill\", function (d) { return d.children || d._children ? \"lightsteelblue\" : \"#fff\"; });\n                    //.attr(\"r\", 10)\n                    //.style(\"fill\", \"#fff\");\n                    nodeEnter.append(\"text\")\n                        .attr(\"y\", function (d) {\n                            return d.children || d._children ? -18 : 18;\n                        })\n                        .attr(\"dy\", \".35em\")\n                        .attr(\"text-anchor\", \"middle\")\n                        .text(function (d) { return d.name; })\n                        .style(\"fill-opacity\", 1e-6);\n                    // Transition nodes to their new position.\n                    //horizontal tree\n                    var nodeUpdate = node.transition()\n                        .duration(duration)\n                        .attr(\"transform\", function (d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n                    nodeUpdate.select(\"circle\")\n                        .attr(\"r\", 10)\n                        .style(\"fill\", function (d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n                    nodeUpdate.select(\"text\")\n                        .style(\"fill-opacity\", 1);\n\n\n                    // Transition exiting nodes to the parent's new position.\n                    var nodeExit = node.exit().transition()\n                        .duration(duration)\n                        .attr(\"transform\", function (d) { return \"translate(\" + source.x + \",\" + source.y + \")\"; })\n                        .remove();\n                    nodeExit.select(\"circle\")\n                        .attr(\"r\", 1e-6);\n                    nodeExit.select(\"text\")\n                        .style(\"fill-opacity\", 1e-6);\n                    // Update the links…\n                    // Declare the links…\n                    var link = svg.selectAll(\"path.link\")\n                        .data(links, function (d) { return d.target.id; });\n                    // Enter the links.\n                    link.enter().insert(\"path\", \"g\")\n                        .attr(\"class\", \"link\")\n\n                        .attr(\"d\", function (d) {\n                            var o = { x: source.x0, y: source.y0 };\n                            return diagonal({ source: o, target: o });\n                        });\n                    // Transition links to their new position.\n                    link.transition()\n                        .duration(duration)\n                    .attr(\"d\", diagonal);\n\n\n                    // Transition exiting nodes to the parent's new position.\n                    link.exit().transition()\n                        .duration(duration)\n                        .attr(\"d\", function (d) {\n                            var o = { x: source.x, y: source.y };\n                            return diagonal({ source: o, target: o });\n                        })\n                        .remove();\n\n                    // Stash the old positions for transition.\n                    nodes.forEach(function (d) {\n                        d.x0 = d.x;\n                        d.y0 = d.y;\n                    });\n                }\n\n                // Toggle children on click.\n                function nodeclick(d) {\n                    if (d.children) {\n                        d._children = d.children;\n                        d.children = null;\n                    } else {\n                        d.children = d._children;\n                        d._children = null;\n                    }\n                    update(d);\n                }\n            }\n            \n            BuildVerticalTree(data, \"#tree-vertical\");\n        });\n\n</script>\n\n","user":"spark","dateUpdated":"2019-05-03T13:03:46+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":474.417,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/undefined","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<style>\n        .node {\n            cursor: pointer;\n        }\n            .node circle {\n                /*fill: #fff;\n                stroke: steelblue;*/\n                stroke-width: 3px;\n            }\n\n            .node text {\n                font: 12px sans-serif;\n            }\n\n        .link {\n            fill: none;\n            stroke: #ccc;\n            stroke-width: 2px;\n        }\n\n        #tree-vertical {\n            margin-bottom: 10px;\n            overflow: scroll;\n            height: 800px;\n        }\n        \n        #tree-vertical svg {\n            display: block;\n            width: 500%;\n            height: 500%;\n        }\n\t\n    </style>\n    \n    <center><h2>Vertical Tree</h2></center>\n    \n    <div id=\"tree-vertical\">\n\n    </div>\n\n\n<!-- load the d3.js library -->\t\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n\t\n<script>\n\n  $(document).ready(function () {\n            \n            //build tree\n            function BuildVerticalTree(treeData, treeContainerDom) {\n            \n                var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n\n\t\t\t\tvar screenHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            \n                var margin = { top: 40, right: 120, bottom: 20, left: 120 };\n                var width = screenWidth - margin.right - margin.left;\n                var height = screenHeight - margin.top - margin.bottom;\n                \n\n                var i = 0, duration = 750;\n                var tree = d3.layout.tree()\n                    .size([height, width]);\n                var diagonal = d3.svg.diagonal()\n                    .projection(function (d) { return [d.x, d.y]; });\n                var svg = d3.select(treeContainerDom)\n                    .append(\"svg\")\n                    .attr(\"width\", width + margin.right + margin.left)\n                    //.attr(\"height\", height + margin.top + margin.bottom)\n                    .attr(\"height\", 500)\n                  .append(\"g\")\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n                root = treeData;\n\n                update(root);\n                function update(source) {\n                    // Compute the new tree layout.\n                    var nodes = tree.nodes(root).reverse(),\n                        links = tree.links(nodes);\n                    // Normalize for fixed-depth.\n                    nodes.forEach(function (d) { d.y = d.depth * 150; });\n                    // Declare the nodes…\n                    var node = svg.selectAll(\"g.node\")\n                        .data(nodes, function (d) { return d.id || (d.id = ++i); });\n                    // Enter the nodes.\n                    var nodeEnter = node.enter().append(\"g\")\n                        .attr(\"class\", \"node\")\n                        .attr(\"transform\", function (d) {\n                            return \"translate(\" + source.x0 + \",\" + source.y0 + \")\";\n                        }).on(\"click\", nodeclick);\n                    nodeEnter.append(\"circle\")\n                     .attr(\"r\", 10)\n                        .attr(\"stroke\", function (d) { return d.children || d._children ? \"steelblue\" : \"#00c13f\"; })\n                        .style(\"fill\", function (d) { return d.children || d._children ? \"lightsteelblue\" : \"#fff\"; });\n                    //.attr(\"r\", 10)\n                    //.style(\"fill\", \"#fff\");\n                    nodeEnter.append(\"text\")\n                        .attr(\"y\", function (d) {\n                            return d.children || d._children ? -18 : 18;\n                        })\n                        .attr(\"dy\", \".35em\")\n                        .attr(\"text-anchor\", \"middle\")\n                        .text(function (d) { return d.name; })\n                        .style(\"fill-opacity\", 1e-6);\n                    // Transition nodes to their new position.\n                    //horizontal tree\n                    var nodeUpdate = node.transition()\n                        .duration(duration)\n                        .attr(\"transform\", function (d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n                    nodeUpdate.select(\"circle\")\n                        .attr(\"r\", 10)\n                        .style(\"fill\", function (d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n                    nodeUpdate.select(\"text\")\n                        .style(\"fill-opacity\", 1);\n\n\n                    // Transition exiting nodes to the parent's new position.\n                    var nodeExit = node.exit().transition()\n                        .duration(duration)\n                        .attr(\"transform\", function (d) { return \"translate(\" + source.x + \",\" + source.y + \")\"; })\n                        .remove();\n                    nodeExit.select(\"circle\")\n                        .attr(\"r\", 1e-6);\n                    nodeExit.select(\"text\")\n                        .style(\"fill-opacity\", 1e-6);\n                    // Update the links…\n                    // Declare the links…\n                    var link = svg.selectAll(\"path.link\")\n                        .data(links, function (d) { return d.target.id; });\n                    // Enter the links.\n                    link.enter().insert(\"path\", \"g\")\n                        .attr(\"class\", \"link\")\n\n                        .attr(\"d\", function (d) {\n                            var o = { x: source.x0, y: source.y0 };\n                            return diagonal({ source: o, target: o });\n                        });\n                    // Transition links to their new position.\n                    link.transition()\n                        .duration(duration)\n                    .attr(\"d\", diagonal);\n\n\n                    // Transition exiting nodes to the parent's new position.\n                    link.exit().transition()\n                        .duration(duration)\n                        .attr(\"d\", function (d) {\n                            var o = { x: source.x, y: source.y };\n                            return diagonal({ source: o, target: o });\n                        })\n                        .remove();\n\n                    // Stash the old positions for transition.\n                    nodes.forEach(function (d) {\n                        d.x0 = d.x;\n                        d.y0 = d.y;\n                    });\n                }\n\n                // Toggle children on click.\n                function nodeclick(d) {\n                    if (d.children) {\n                        d._children = d.children;\n                        d.children = null;\n                    } else {\n                        d.children = d._children;\n                        d._children = null;\n                    }\n                    update(d);\n                }\n            }\n            \n            BuildVerticalTree(data, \"#tree-vertical\");\n        });\n\n</script>"}]},"apps":[],"jobName":"paragraph_1556878574188_-2039510732","id":"20190503-121614_1974613724","dateCreated":"2019-05-03T12:16:14+0200","dateStarted":"2019-05-03T13:03:41+0200","dateFinished":"2019-05-03T13:03:41+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:13341"},{"text":"%angular\n","user":"spark","dateUpdated":"2019-05-03T13:03:41+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1556881421173_-1091183791","id":"20190503-130341_1134276986","dateCreated":"2019-05-03T13:03:41+0200","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14104"}],"name":"dec","id":"2ECEBV6F9","noteParams":{},"noteForms":{},"angularObjects":{"angular:shared_process":[],"spark2:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":true,"looknfeel":"default","personalizedMode":"false"},"info":{}}